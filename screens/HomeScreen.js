import React, { useState, useEffect } from 'react';
import { View, Text, TouchableOpacity, StyleSheet } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';

const HomeScreen = () => {
  const [startTime, setStartTime] = useState(null);
  const [elapsedTime, setElapsedTime] = useState('');

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞
  const startSobrietyTimer = async () => {
    const now = Date.now(); // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    await AsyncStorage.setItem('sobrietyStartTime', now.toString()); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ AsyncStorage
    setStartTime(now);
    updateElapsedTime(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
  };

  // –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  const updateElapsedTime = () => {
    if (!startTime) return;
    const now = Date.now();
    const difference = now - startTime;

    const days = Math.floor(difference / (1000 * 60 * 60 * 24));
    const hours = Math.floor((difference / (1000 * 60 * 60)) % 24);
    const minutes = Math.floor((difference / (1000 * 60)) % 60);

    setElapsedTime(`${days} –¥–Ω–µ–π, ${hours} —á–∞—Å–æ–≤, ${minutes} –º–∏–Ω—É—Ç`);
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  useEffect(() => {
    const fetchStartTime = async () => {
      const storedTime = await AsyncStorage.getItem('sobrietyStartTime');
      if (storedTime) {
        setStartTime(parseInt(storedTime, 10));
      }
    };
    fetchStartTime();
  }, []);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  useEffect(() => {
    const interval = setInterval(updateElapsedTime, 60000);
    return () => clearInterval(interval);
  }, [startTime]);

  return (
    <View style={styles.container}>
      <Text style={styles.title}>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</Text>

      <Text style={styles.timerText}>
        {startTime ? `–í—ã –¥–µ—Ä–∂–∏—Ç–µ—Å—å: ${elapsedTime}` : '–ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å", —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—á—ë—Ç—á–∏–∫'}
      </Text>

      {!startTime && (
        <TouchableOpacity style={styles.startButton} onPress={startSobrietyTimer}>
          <Text style={styles.startButtonText}>üöÄ –ù–∞—á–∞—Ç—å –æ—Ç—Å—á—ë—Ç</Text>
        </TouchableOpacity>
      )}

      {/* –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ */}
      <TouchableOpacity style={styles.button} onPress={() => alert("üìä –†–∞–∑–¥–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")}>
        <Text style={styles.buttonText}>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</Text>
      </TouchableOpacity>

      <TouchableOpacity style={styles.button} onPress={() => alert("üí™ –†–∞–∑–¥–µ–ª –º–æ—Ç–∏–≤–∞—Ü–∏–∏!")}>
        <Text style={styles.buttonText}>üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è</Text>
      </TouchableOpacity>

      <TouchableOpacity style={styles.button} onPress={() => alert("üí¨ –°–æ–æ–±—â–µ—Å—Ç–≤–æ —Å–∫–æ—Ä–æ –∑–¥–µ—Å—å!")}>
        <Text style={styles.buttonText}>üí¨ –°–æ–æ–±—â–µ—Å—Ç–≤–æ</Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F7F3E9',
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 20,
  },
  title: {
    fontSize: 26,
    fontWeight: 'bold',
    marginBottom: 20,
    color: '#333',
  },
  timerText: {
    fontSize: 18,
    marginVertical: 20,
    color: '#555',
    textAlign: 'center',
  },
  startButton: {
    backgroundColor: '#4CAF50',
    padding: 15,
    width: '80%',
    borderRadius: 15,
    alignItems: 'center',
    marginTop: 20,
  },
  startButtonText: {
    fontSize: 20,
    color: '#fff',
    fontWeight: 'bold',
  },
  button: {
    backgroundColor: '#FF7854',
    padding: 15,
    width: '80%',
    marginVertical: 8,
    borderRadius: 15,
    alignItems: 'center',
  },
  buttonText: {
    fontSize: 18,
    color: '#fff',
    fontWeight: 'bold',
  },
});

export default HomeScreen;
