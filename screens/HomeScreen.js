import React, { useState, useEffect } from 'react';
import { View, Text, TouchableOpacity, StyleSheet } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import * as Notifications from 'expo-notifications';
import { useNavigation } from '@react-navigation/native';

// –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: false,
    shouldSetBadge: false,
  }),
});

const HomeScreen = () => {
  const [startTime, setStartTime] = useState(null);
  const [elapsedTime, setElapsedTime] = useState('');
  const navigation = useNavigation();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const requestNotificationPermission = async () => {
    const { status } = await Notifications.getPermissionsAsync();
    if (status !== 'granted') {
      await Notifications.requestPermissionsAsync();
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞
  const startSobrietyTimer = async () => {
    const now = Date.now();
    await AsyncStorage.setItem('sobrietyStartTime', now.toString());
    setStartTime(now);
    await requestNotificationPermission();
    scheduleDailyNotification();
  };

  // –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  const updateElapsedTime = () => {
    if (!startTime) return;
    const now = Date.now();
    const difference = now - startTime;
    const days = Math.floor(difference / (1000 * 60 * 60 * 24));
    setElapsedTime(`${days} –¥–Ω–µ–π`);
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  useEffect(() => {
    const fetchStartTime = async () => {
      const storedTime = await AsyncStorage.getItem('sobrietyStartTime');
      if (storedTime) {
        setStartTime(parseInt(storedTime, 10));
      }
    };
    fetchStartTime();
  }, []);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  useEffect(() => {
    const interval = setInterval(updateElapsedTime, 60000);
    return () => clearInterval(interval);
  }, [startTime]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
  const scheduleDailyNotification = async () => {
    await Notifications.scheduleNotificationAsync({
      content: {
        title: "üî• –¢—ã –¥–µ—Ä–∂–∏—à—å—Å—è!",
        body: "–ï—â–µ –æ–¥–∏–Ω –¥–µ–Ω—å –±–µ–∑ –≤—Ä–µ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™",
      },
      trigger: { hour: 10, minute: 0, repeats: true }, // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
    });
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</Text>

      <Text style={styles.timerText}>
        {startTime ? `–í—ã –¥–µ—Ä–∂–∏—Ç–µ—Å—å: ${elapsedTime}` : '–ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å", —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—á—ë—Ç—á–∏–∫'}
      </Text>

      {!startTime && (
        <TouchableOpacity style={styles.startButton} onPress={startSobrietyTimer}>
          <Text style={styles.startButtonText}>üöÄ –ù–∞—á–∞—Ç—å –æ—Ç—Å—á—ë—Ç</Text>
        </TouchableOpacity>
      )}

      {/* –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω—ã */}
      <TouchableOpacity style={styles.button} onPress={() => navigation.navigate('Stats')}>
        <Text style={styles.buttonText}>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</Text>
      </TouchableOpacity>

      <TouchableOpacity style={styles.button} onPress={() => navigation.navigate('Motivation')}>
        <Text style={styles.buttonText}>üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è</Text>
      </TouchableOpacity>

      <TouchableOpacity style={styles.button} onPress={() => navigation.navigate('Community')}>
        <Text style={styles.buttonText}>üí¨ –°–æ–æ–±—â–µ—Å—Ç–≤–æ</Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.creat
